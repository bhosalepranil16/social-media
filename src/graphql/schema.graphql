type Query {
    me: String!
    login(data: loginUser!): loginCredentials!
    user(id: ID!): User!
    users(page: Int!): [User!]!
    post(id: ID!): Post!  
    posts(page: Int!, onlySelf: Boolean!): [Post!]!
    comment(id: ID!): Comment!
    comments(page: Int!, onlySelf: Boolean!): [Comment!]!
}

type Mutation {
    createUser(data: createUserInput!): User!
    updateUser(data: updateUserInput!): User!
    deleteUser: Int!
    createPost(data: createPostInput!): Post!
    deletePost(id: ID!): Int!
    createComment(data: createCommentInput!): Comment!
    deleteComment(id: ID!): Int!
}

input createUserInput {
    name: String!
    email: String!
    password: String!
    age: Int
}

input createPostInput {
    title: String!
    body: String!
}

input createCommentInput {
    text: String!
    post: ID!
}

input updateUserInput {
    name: String
    email: String
    password: String
    age: Int
}

input loginUser {
    email: String!
    password: String!
}

type loginCredentials {
    _id: ID!
    token: String!
}

type User {
    _id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    _id: ID!
    title: String!
    body: String!
    comments: [Comment!]!
    author: User!
}

type Comment {
    _id: ID!
    text: String!
    author: User!
    post: Post!
}